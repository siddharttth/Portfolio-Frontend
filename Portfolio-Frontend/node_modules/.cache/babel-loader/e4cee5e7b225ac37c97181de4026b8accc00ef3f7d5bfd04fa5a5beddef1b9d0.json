{"ast":null,"code":"var _jsxFileName = \"D:\\\\Buildd\\\\siddharthfun\\\\Portfolio-Frontend\\\\Portfolio-Frontend\\\\src\\\\components\\\\SnakeGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './SnakeGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  _s();\n  const gridSize = 20;\n  const initialSnake = [{\n    x: 10,\n    y: 10\n  }];\n  const [snake, setSnake] = useState(initialSnake);\n  const [direction, setDirection] = useState({\n    x: 1,\n    y: 0\n  });\n  const [food, setFood] = useState({\n    x: 5,\n    y: 5\n  });\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    const handleSwipe = e => {\n      const touch = e.changedTouches[0];\n      const swipeDir = getSwipeDirection(touch);\n      if (swipeDir) setDirection(swipeDir);\n    };\n    window.addEventListener('touchstart', handleSwipe);\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('touchstart', handleSwipe);\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [direction]);\n  const getSwipeDirection = touch => {\n    // Swipe detection logic\n  };\n  const handleKeyDown = e => {\n    switch (e.key) {\n      case 'ArrowUp':\n        if (direction.y === 0) setDirection({\n          x: 0,\n          y: -1\n        });\n        break;\n      case 'ArrowDown':\n        if (direction.y === 0) setDirection({\n          x: 0,\n          y: 1\n        });\n        break;\n      case 'ArrowLeft':\n        if (direction.x === 0) setDirection({\n          x: -1,\n          y: 0\n        });\n        break;\n      case 'ArrowRight':\n        if (direction.x === 0) setDirection({\n          x: 1,\n          y: 0\n        });\n        break;\n      default:\n        break;\n    }\n  };\n  useEffect(() => {\n    if (gameOver) return;\n    const interval = setInterval(moveSnake, 200);\n    return () => clearInterval(interval);\n  }, [snake, direction]);\n  const moveSnake = () => {\n    const newSnake = [...snake];\n    const head = {\n      ...newSnake[0]\n    };\n    head.x += direction.x;\n    head.y += direction.y;\n    if (head.x === food.x && head.y === food.y) {\n      newSnake.unshift({\n        x: food.x,\n        y: food.y\n      });\n      setFood({\n        x: Math.floor(Math.random() * gridSize),\n        y: Math.floor(Math.random() * gridSize)\n      });\n    } else {\n      newSnake.pop();\n    }\n    if (head.x < 0 || head.x >= gridSize || head.y < 0 || head.y >= gridSize || isColliding(newSnake, head)) {\n      setGameOver(true);\n      return;\n    }\n    newSnake.unshift(head);\n    setSnake(newSnake);\n  };\n  const isColliding = (snake, head) => {\n    return snake.slice(1).some(segment => segment.x === head.x && segment.y === head.y);\n  };\n  const resetGame = () => {\n    setSnake(initialSnake);\n    setDirection({\n      x: 1,\n      y: 0\n    });\n    setFood({\n      x: 5,\n      y: 5\n    });\n    setGameOver(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"snake-game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Snake Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"snake-grid\",\n      children: [...Array(gridSize)].map((_, row) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [...Array(gridSize)].map((_, col) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${snake.some(segment => segment.x === col && segment.y === row) ? 'snake' : food.x === col && food.y === row ? 'food' : ''}`\n        }, col, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this))\n      }, row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Game Over! Your score: \", snake.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGame,\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(SnakeGame, \"97+kmuBVrmNG+oAg0CLenIBdlgY=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SnakeGame","_s","gridSize","initialSnake","x","y","snake","setSnake","direction","setDirection","food","setFood","gameOver","setGameOver","handleSwipe","e","touch","changedTouches","swipeDir","getSwipeDirection","window","addEventListener","handleKeyDown","removeEventListener","key","interval","setInterval","moveSnake","clearInterval","newSnake","head","unshift","Math","floor","random","pop","isColliding","slice","some","segment","resetGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","map","_","row","col","length","onClick","_c","$RefreshReg$"],"sources":["D:/Buildd/siddharthfun/Portfolio-Frontend/Portfolio-Frontend/src/components/SnakeGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './SnakeGame.css';\n\nconst SnakeGame = () => {\n  const gridSize = 20;\n  const initialSnake = [{ x: 10, y: 10 }];\n  const [snake, setSnake] = useState(initialSnake);\n  const [direction, setDirection] = useState({ x: 1, y: 0 });\n  const [food, setFood] = useState({ x: 5, y: 5 });\n  const [gameOver, setGameOver] = useState(false);\n\n  useEffect(() => {\n    const handleSwipe = (e) => {\n      const touch = e.changedTouches[0];\n      const swipeDir = getSwipeDirection(touch);\n      if (swipeDir) setDirection(swipeDir);\n    };\n    window.addEventListener('touchstart', handleSwipe);\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('touchstart', handleSwipe);\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [direction]);\n\n  const getSwipeDirection = (touch) => {\n    // Swipe detection logic\n  };\n\n  const handleKeyDown = (e) => {\n    switch (e.key) {\n      case 'ArrowUp':\n        if (direction.y === 0) setDirection({ x: 0, y: -1 });\n        break;\n      case 'ArrowDown':\n        if (direction.y === 0) setDirection({ x: 0, y: 1 });\n        break;\n      case 'ArrowLeft':\n        if (direction.x === 0) setDirection({ x: -1, y: 0 });\n        break;\n      case 'ArrowRight':\n        if (direction.x === 0) setDirection({ x: 1, y: 0 });\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    if (gameOver) return;\n    const interval = setInterval(moveSnake, 200);\n    return () => clearInterval(interval);\n  }, [snake, direction]);\n\n  const moveSnake = () => {\n    const newSnake = [...snake];\n    const head = { ...newSnake[0] };\n    head.x += direction.x;\n    head.y += direction.y;\n\n    if (head.x === food.x && head.y === food.y) {\n      newSnake.unshift({ x: food.x, y: food.y });\n      setFood({\n        x: Math.floor(Math.random() * gridSize),\n        y: Math.floor(Math.random() * gridSize),\n      });\n    } else {\n      newSnake.pop();\n    }\n\n    if (head.x < 0 || head.x >= gridSize || head.y < 0 || head.y >= gridSize || isColliding(newSnake, head)) {\n      setGameOver(true);\n      return;\n    }\n\n    newSnake.unshift(head);\n    setSnake(newSnake);\n  };\n\n  const isColliding = (snake, head) => {\n    return snake.slice(1).some((segment) => segment.x === head.x && segment.y === head.y);\n  };\n\n  const resetGame = () => {\n    setSnake(initialSnake);\n    setDirection({ x: 1, y: 0 });\n    setFood({ x: 5, y: 5 });\n    setGameOver(false);\n  };\n\n  return (\n    <div className=\"snake-game-container\">\n      <h2>Snake Game</h2>\n      <div className=\"snake-grid\">\n        {[...Array(gridSize)].map((_, row) => (\n          <div key={row} className=\"row\">\n            {[...Array(gridSize)].map((_, col) => (\n              <div\n                key={col}\n                className={`cell ${\n                  snake.some((segment) => segment.x === col && segment.y === row)\n                    ? 'snake'\n                    : food.x === col && food.y === row\n                    ? 'food'\n                    : ''\n                }`}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n      {gameOver && <p>Game Over! Your score: {snake.length}</p>}\n      <button onClick={resetGame}>Restart</button>\n    </div>\n  );\n};\n\nexport default SnakeGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}