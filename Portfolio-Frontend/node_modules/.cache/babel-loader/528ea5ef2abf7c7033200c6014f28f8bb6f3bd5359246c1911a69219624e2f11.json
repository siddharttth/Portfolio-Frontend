{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./SnakeGame.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SnakeGame=()=>{const gridSize=20;const initialSnake=[{x:10,y:10}];const[snake,setSnake]=useState(initialSnake);const[direction,setDirection]=useState({x:1,y:0});const[food,setFood]=useState({x:5,y:5});const[gameOver,setGameOver]=useState(false);useEffect(()=>{const handleSwipe=e=>{const touch=e.changedTouches[0];const swipeDir=getSwipeDirection(touch);if(swipeDir)setDirection(swipeDir);};window.addEventListener('touchstart',handleSwipe);window.addEventListener('keydown',handleKeyDown);return()=>{window.removeEventListener('touchstart',handleSwipe);window.removeEventListener('keydown',handleKeyDown);};},[direction]);const getSwipeDirection=touch=>{// Swipe detection logic\n};const handleKeyDown=e=>{switch(e.key){case'ArrowUp':if(direction.y===0)setDirection({x:0,y:-1});break;case'ArrowDown':if(direction.y===0)setDirection({x:0,y:1});break;case'ArrowLeft':if(direction.x===0)setDirection({x:-1,y:0});break;case'ArrowRight':if(direction.x===0)setDirection({x:1,y:0});break;default:break;}};useEffect(()=>{if(gameOver)return;const interval=setInterval(moveSnake,200);return()=>clearInterval(interval);},[snake,direction]);const moveSnake=()=>{const newSnake=[...snake];const head={...newSnake[0]};head.x+=direction.x;head.y+=direction.y;if(head.x===food.x&&head.y===food.y){newSnake.unshift({x:food.x,y:food.y});setFood({x:Math.floor(Math.random()*gridSize),y:Math.floor(Math.random()*gridSize)});}else{newSnake.pop();}if(head.x<0||head.x>=gridSize||head.y<0||head.y>=gridSize||isColliding(newSnake,head)){setGameOver(true);return;}newSnake.unshift(head);setSnake(newSnake);};const isColliding=(snake,head)=>{return snake.slice(1).some(segment=>segment.x===head.x&&segment.y===head.y);};const resetGame=()=>{setSnake(initialSnake);setDirection({x:1,y:0});setFood({x:5,y:5});setGameOver(false);};return/*#__PURE__*/_jsxs(\"div\",{className:\"snake-game-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Snake Game\"}),/*#__PURE__*/_jsx(\"div\",{className:\"snake-grid\",children:[...Array(gridSize)].map((_,row)=>/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:[...Array(gridSize)].map((_,col)=>/*#__PURE__*/_jsx(\"div\",{className:`cell ${snake.some(segment=>segment.x===col&&segment.y===row)?'snake':food.x===col&&food.y===row?'food':''}`},col))},row))}),gameOver&&/*#__PURE__*/_jsxs(\"p\",{children:[\"Game Over! Your score: \",snake.length]}),/*#__PURE__*/_jsx(\"button\",{onClick:resetGame,children:\"Restart\"})]});};export default SnakeGame;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","SnakeGame","gridSize","initialSnake","x","y","snake","setSnake","direction","setDirection","food","setFood","gameOver","setGameOver","handleSwipe","e","touch","changedTouches","swipeDir","getSwipeDirection","window","addEventListener","handleKeyDown","removeEventListener","key","interval","setInterval","moveSnake","clearInterval","newSnake","head","unshift","Math","floor","random","pop","isColliding","slice","some","segment","resetGame","className","children","Array","map","_","row","col","length","onClick"],"sources":["D:/Buildd/siddharthfun/Portfolio-Frontend/Portfolio-Frontend/src/components/SnakeGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './SnakeGame.css';\n\nconst SnakeGame = () => {\n  const gridSize = 20;\n  const initialSnake = [{ x: 10, y: 10 }];\n  const [snake, setSnake] = useState(initialSnake);\n  const [direction, setDirection] = useState({ x: 1, y: 0 });\n  const [food, setFood] = useState({ x: 5, y: 5 });\n  const [gameOver, setGameOver] = useState(false);\n\n  useEffect(() => {\n    const handleSwipe = (e) => {\n      const touch = e.changedTouches[0];\n      const swipeDir = getSwipeDirection(touch);\n      if (swipeDir) setDirection(swipeDir);\n    };\n    window.addEventListener('touchstart', handleSwipe);\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('touchstart', handleSwipe);\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [direction]);\n\n  const getSwipeDirection = (touch) => {\n    // Swipe detection logic\n  };\n\n  const handleKeyDown = (e) => {\n    switch (e.key) {\n      case 'ArrowUp':\n        if (direction.y === 0) setDirection({ x: 0, y: -1 });\n        break;\n      case 'ArrowDown':\n        if (direction.y === 0) setDirection({ x: 0, y: 1 });\n        break;\n      case 'ArrowLeft':\n        if (direction.x === 0) setDirection({ x: -1, y: 0 });\n        break;\n      case 'ArrowRight':\n        if (direction.x === 0) setDirection({ x: 1, y: 0 });\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    if (gameOver) return;\n    const interval = setInterval(moveSnake, 200);\n    return () => clearInterval(interval);\n  }, [snake, direction]);\n\n  const moveSnake = () => {\n    const newSnake = [...snake];\n    const head = { ...newSnake[0] };\n    head.x += direction.x;\n    head.y += direction.y;\n\n    if (head.x === food.x && head.y === food.y) {\n      newSnake.unshift({ x: food.x, y: food.y });\n      setFood({\n        x: Math.floor(Math.random() * gridSize),\n        y: Math.floor(Math.random() * gridSize),\n      });\n    } else {\n      newSnake.pop();\n    }\n\n    if (head.x < 0 || head.x >= gridSize || head.y < 0 || head.y >= gridSize || isColliding(newSnake, head)) {\n      setGameOver(true);\n      return;\n    }\n\n    newSnake.unshift(head);\n    setSnake(newSnake);\n  };\n\n  const isColliding = (snake, head) => {\n    return snake.slice(1).some((segment) => segment.x === head.x && segment.y === head.y);\n  };\n\n  const resetGame = () => {\n    setSnake(initialSnake);\n    setDirection({ x: 1, y: 0 });\n    setFood({ x: 5, y: 5 });\n    setGameOver(false);\n  };\n\n  return (\n    <div className=\"snake-game-container\">\n      <h2>Snake Game</h2>\n      <div className=\"snake-grid\">\n        {[...Array(gridSize)].map((_, row) => (\n          <div key={row} className=\"row\">\n            {[...Array(gridSize)].map((_, col) => (\n              <div\n                key={col}\n                className={`cell ${\n                  snake.some((segment) => segment.x === col && segment.y === row)\n                    ? 'snake'\n                    : food.x === col && food.y === row\n                    ? 'food'\n                    : ''\n                }`}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n      {gameOver && <p>Game Over! Your score: {snake.length}</p>}\n      <button onClick={resetGame}>Restart</button>\n    </div>\n  );\n};\n\nexport default SnakeGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}